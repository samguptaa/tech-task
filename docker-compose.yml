version: '3.8'

services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: zephyr-postgres
    environment:
      POSTGRES_DB: zephyr
      POSTGRES_USER: zephyr
      POSTGRES_PASSWORD: zephyr_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zephyr -d zephyr"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis - Cache and Message Queue
  redis:
    image: redis:7-alpine
    container_name: zephyr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # RabbitMQ - Message Queue (Alternative to Redis Streams)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: zephyr-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: zephyr
      RABBITMQ_DEFAULT_PASS: zephyr_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Main Application Service
  app:
    build: .
    container_name: zephyr-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://zephyr:zephyr_password@postgres:5432/zephyr
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://zephyr:zephyr_password@rabbitmq:5672
      - MAX_HOLDS_PER_USER=5
      - DEFAULT_HOLD_DURATION=60
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue Worker
  worker:
    build: .
    container_name: zephyr-worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://zephyr:zephyr_password@postgres:5432/zephyr
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://zephyr:zephyr_password@rabbitmq:5672
      - WORKER_MODE=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    command: ["node", "dist/worker.js"]

  # Development service with hot reload
  app-dev:
    build: .
    container_name: zephyr-app-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://zephyr:zephyr_password@postgres:5432/zephyr
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://zephyr:zephyr_password@rabbitmq:5672
      - MAX_HOLDS_PER_USER=5
    volumes:
      - ./src:/app/src
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: npm run dev:watch
    profiles:
      - dev

  # Nginx Load Balancer (for production scaling)
  nginx:
    image: nginx:alpine
    container_name: zephyr-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    profiles:
      - production

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: zephyr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: zephyr-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: zephyr-network
    driver: bridge